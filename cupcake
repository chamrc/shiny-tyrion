#!/usr/bin/env coffee

#-------------------------------------------------------------------------------------
# Modules
#-------------------------------------------------------------------------------------

__cheerio__ = require('cheerio')
__colors__ = require("colors")
__async__ = require("async")
__walk__ = require("walk")
__path__ = require("path")
__cli__ = require("commander")
__cp__ = require("child_process")
__fs__ = require('fs')

#-------------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------------

version = require('./package.json').version

usage  = "-s [-n -p -f -c -i] | -t [<config> -T <target>] | -C [<config> -T <target>] | -h | -w\n\t ".green + "ccc " + "-s [-n -p -f -c -i] | -t [<config> -T <target>] | -C [<config> -T <target>] | -h | -w\n\n  ".green
usage += 'Note: ' + 'By default (if no option/file specified), chococupcake search for file to run\n\tin the following order:\n\t '
usage += 'cluster.js -> instance.js -> server.js -> app.js'.underline.yellow

file = null
port = null
test = null
config = null
browser = null
expandFolders = null
target = 1 # 0: server, 1: all, 2: karma, 3: selenium
opencmd = if (process.platform != 'darwin') then 'xdg-open' else 'open'

#-------------------------------------------------------------------------------------
# Inputs
#-------------------------------------------------------------------------------------


fileinput = (val) ->
	file = val

portinput = (val) ->
	port = val

targetinput = (val) ->
	target = if val == 'S' then 3 else (if val == 's' then 0 else (if val == 'c' then 2 else 1))

configinput = (val) ->
	config = val

browserinput = (val) ->
	browser = val

expandinput = (val) ->
	expandFolders = val

#-------------------------------------------------------------------------------------
# Helper
#-------------------------------------------------------------------------------------

String.prototype.contains = (text) ->
	return this.indexOf(text) != -1

rmDirByName = (name, callback) ->
	cmd = "find . -name '" + name + "' -type d -print0 | xargs -0 rm -r"
	run(cmd, callback)

run = (cmd, callback, hideStdIO) ->
	sys = __cp__.exec(cmd, (err, stdout, stderr) ->)

	if (!hideStdIO)

		sys.stdout.on('data', (data) ->
			process.stdout.write(data)
		)

		sys.stderr.on('data', (data) ->
			process.stderr.write(data)
		)

	sys.on('exit', (code, signal) ->
		callback(null, code, signal) if callback
	)

exec = (cmd, callback, hideStdIO) ->
	sys = __cp__.exec(cmd, (err, stdout, stderr) ->)
	ret = null
	if (!hideStdIO)
		sys.stdout.on('data', (data) ->
			ret = data
		)

	sys.on('exit', () ->
		callback(ret) if callback
	)

checkForDevelopmentFolder = (callback, skipCompile) ->
	if (__cli__.production)
		build(callback)
	else 
		if (!__fs__.existsSync('./development'))
			devBuild(callback) 
		else if (!skipCompile)
			cmd = 'grunt compileTs --force'
			run(cmd, callback)
		else
			callback() if callback

#-------------------------------------------------------------------------------------
# Link & unlink
#-------------------------------------------------------------------------------------

linkdir = (indir, name, sed, callback) ->
	msg = "\tLinking directory matching name " + name + " in " + indir + " using RegExp \"" + sed + '"'
	console.log(msg.green)
	cmd = "find " + indir + " -name '" + name + "' -type d | while read infile; do outfile=`echo $infile | sed '" + sed + "'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\"; ln -s \"$PWD/$infile\" \"$PWD/$outfile\"; done"
	run(cmd, callback)

cpdir = (indir, name, sed, callback) ->
	msg = "\tCopying directory matching name " + name + " in " + indir + " using RegExp \"" + sed + '"'
	console.log(msg.green)
	cmd = "find " + indir + " -name '" + name + "' -type d | while read infile; do outfile=`echo $infile | sed '" + sed + "'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\"; cp -r \"$PWD/$infile\" \"$PWD/$outfile\"; done"
	run(cmd, callback)

linkFilesInDir = (indir, sed, callback) ->
	msg = "\tLinking files in directory in " + indir + " using RegExp \"" + sed + '"'
	console.log(msg.green)
	cmd = "find \"" + indir + "\" -type f | while read infile; do outfile=`echo \"$infile\" | perl -pe '" + sed + "'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\" && ln -s \"$PWD/$infile\" \"$PWD/$outfile\"; done;"
	run(cmd, callback)

link = (callback) ->
	__async__.series([(callback) ->
		unlink(callback)
	, (callback) ->
		console.log('Symbolic linking all test files to ./tests.'.green)
		linkdir('app', "tests", 's/^app\\\/tests/tests\\\/server/', callback)
	, (callback) ->
		linkdir('public', "karma", 's/^public/tests\\\/client\\\/karma/;s/\\\/js\\\/tests\\\/karma//;', callback)
	, (callback) ->
		linkdir('public', "selenium", 's/^public/tests\\\/client\\\/selenium/;s/\\\/js\\\/tests\\\/selenium//;', callback)
	# , (callback) ->
	# 	linkFilesInDir('public', 'definitions', 's|public\\\/definitions\\\/|development\\\/js\\\/|', callback)
	, (callback) ->
		linkFilesInDir('public/js/src', 's|public\\\/js\\\/src\\\/|development\\\/js\\\/|', callback)
	, (callback) ->
		linkFilesInDir('public/html', 's|^.*?\\\/html\\\/|development\\\/html\\\/|', callback) 
	, (callback) ->
		linkFilesInDir('public/img', 's|^.*?\\\/img\\\/|development\\\/img\\\/|', callback)	
	, (callback) ->
		linkFilesInDir('public/locales', 's|^.*?\\\/locales\\\/|development\\\/locales\\\/|', callback)
	, (callback) ->
		linkFilesInDir('public/css', 's|^.*?\\\/css\\\/|development\\\/css\\\/|', callback)
	, (callback) ->
		unlinkdir('app public', callback)
	, (callback) ->
		copyLibraries('development', callback)
	], (err, results) ->
		callback() if callback
	)

unlinkdir = (dir, callback) ->
	cmd = 'find ' + dir + ' -type l -print0 | xargs -0 rm'
	run(cmd, callback, true)

unlink = (callback) ->
	console.log('Deleting libpeerconnection.log tests development .tmp coverage documentations & production folders.'.green)
	cmd = 'rm -r ./tests ./libpeerconnection.log ./.tmp ./development ./coverage ./production ./documentations'
	run(cmd, callback, true)

#-------------------------------------------------------------------------------------
# Test
#-------------------------------------------------------------------------------------

# Server Test
testServer = (callback) ->
	fileurl = if config && target < 1 then config else 'tests/server'
	msg = 'Testing server @ "' + fileurl + '"\n'
	console.log(msg.green)

	childEnv = process.env
	childEnv.NODE_ENV = 'test'

	server = __cp__.spawn('mocha', ['--recursive', '-R', 'spec', fileurl], {env: childEnv, stdio: 'inherit'})
	server.on('close', (code, signal)  ->
		callback(null, code)
	)

# Client Test
writeHeadForTests = (out, $, callback) ->
	if out.contains('_head') || out.contains('_body')
		if callback then return callback() else return

	out = out.replace('.html', '_head.js')
	styles = []
	scripts = []
	src = null

	for style in $('head link')
		if (!style || !style.attribs || !style.attribs.href) then continue else src = style.attribs.href
		src = src.replace('/static', '/development') if (src.indexOf('http') == -1) 
		src = src.replace('/main.less', '/test.css').replace('/development', '/tests/client/.tmp') if (style.attribs.rel && style.attribs.rel == 'stylesheet/less')
		styles.push(src)

	for script in $('head script')
		if (!script || !script.attribs || !script.attribs.src) then continue else src = script.attribs.src
		src = src.replace('/static/', '/development/') if (src.indexOf('http') == -1) 
		scripts.push(src)

	data = styles: styles, scripts: scripts
	data = 'module.exports = ' + JSON.stringify(data)

	__fs__.writeFile(out, data, (err) ->
		console.log('  |___generated '.grey + out.cyan)
		if err then callback(err) else callback()
	)

writeBodyForTests = (out, $, callback) ->
	if out.contains('_head') || out.contains('_body')
		if callback then return callback() else return

	out = out.replace('.html', '_body.html')
	__fs__.writeFile(out, $('body').html(), (err) ->
		console.log('  |___generated '.grey + out.cyan)
		if err then callback(err) else callback()
	)

splitHTMLForTests = (html, callback) ->
	__async__.waterfall([(callback) ->
		__fs__.readFile(html, 'utf8', (err, data) ->
			if err then callback(err) else callback(null, data)
		)
	, (data, callback) ->
		$ = __cheerio__.load(data)

		callback(null, $)
	, ($, callback) ->
		__async__.parallel([(callback) ->
				writeHeadForTests(html, $, callback)
		, (callback) ->
			writeBodyForTests(html, $, callback)
		], (err, results) ->
			console.log('')
			if (err) then callback(err) else callback()
		)
	], (err, result) ->
		callback() if callback
	);
	

prepareHTMLsForTests = (callback) ->
	__async__.waterfall([(callback) ->
		htmlFiles = [];
		walker = __walk__.walk('./tests/client/.tmp/html', { followLinks: false })
		walker.on('file', (root, stat, next) ->
			match = stat.name.match(/\.[^.]+$/)

			if (stat.type == 'file' && match && match[0] == '.html')
				htmlFiles.push(root + '/' + stat.name)

			next()
		)

		walker.on('end', () ->
			callback(null, htmlFiles)
		)
	, (htmlFiles, callback) ->
		__async__.each(htmlFiles, splitHTMLForTests, callback)

	], (err, results) ->
		callback() if callback
	)

testClient = (callback) ->
	exitCode = 0
	__async__.series([(callback) ->
		testBuild(callback)	

	, (callback) ->
		console.log('Starting server @ localhost:3000'.green)
		process.on( 'SIGINT', () ->
			console.log('Stopping server'.red)
			cmd =  'utilities/hooks/post-test.sh'
			run(cmd, () ->
				process.exit()
			, true)
		)

		cmd =  'utilities/hooks/pre-test.sh'
		run(cmd, callback)
	, (callback) ->
		return callback() if target == 0 || target == 2

		fileurl = if config && target == 3 then config else 'tests/client/selenium'
		msg = 'Testing client @ "' + fileurl + '" using Selenium\n'
		console.log(msg.green)

		childEnv = process.env
		childEnv.NODE_ENV = 'test'

		server = __cp__.spawn('parallel_rspec', [fileurl], {env: childEnv, stdio: 'inherit'})
		server.on('close', (code, signal)  ->
			exitCode |= code if code
			callback()
		)

	, (callback) ->
		return callback() if target == 0 || target == 3

		fileurl = if config && target == 2 then config else 'config/karma/all-test.conf.js'
		msg = 'Testing client @ "' + fileurl + '" using Karma\n'
		console.log(msg.green)

		cmd = 'karma start "' + fileurl + '" '
		if !__cli__.multiruns
			cmd += '--single-run --no-auto-watch ' 
		if __cli__.inBrowser && browser
			cmd += '--browsers ' + browser 

		run(cmd, (err, code, signal) ->
			exitCode |= code if code && !err
			callback()
		)
	, (callback) ->
		console.log('Stopping server'.green)
		cmd =  'utilities/hooks/post-test.sh'
		run(cmd, callback, true)
	], (err, results) ->
		callback(err, exitCode) if callback
	)
	

test = (callback) ->
	__async__.series([(callback) ->
		run('export NODE_ENV=test', callback)
	, (callback) ->
		if target >= 1 then checkForDevelopmentFolder(callback) else link(callback, 0)

	, (callback) ->
		if target <= 1 then testServer(callback) else callback(null, 0)
	# , (callback) ->
		# if (target >= 1)
		# 	console.log('Compiling all .ts files in ./development/js folder to ./development/js/scripts.js'.green)
		# 	cmd = "find development/js -name '*.ts' -not -name '*.d.ts' | xargs tsc --out \"development/js/scripts.js\" --sourcemap --target ES5"
		# 	run(cmd, callback)
		# else
		# 	callback()
	, (callback) ->
		if target >= 1 then testClient(callback) else callback(null, 0)
		
	], (err, results) ->
		exitCode = results[2] | results[3]
		process.exit(exitCode)
	)

#-------------------------------------------------------------------------------------
# Coverage
#-------------------------------------------------------------------------------------

mkJsCov = (callback) ->
	if (target <= 1)	
		console.log("Please don't stop the process until it's over.".red)
		console.log("Otherwise, you might need to run the following line manually.".yellow)
		console.log("\tif [ -e \"app/.src-orig\" ]; then rm -r app/src && mv app/.src-orig app/src; fi".yellow)
		run('jscov app/src app/.src-cov && mv app/src app/.src-orig && mv app/.src-cov app/src', callback)
	else
		callback()

rmJSCov = (callback) ->
	if (target <= 1)
		run('rm -r app/src && mv app/.src-orig app/src', callback)
	else
		callback()

preCov = (callback) ->
	mkJsCov(callback)

postCov = (callback) ->
	rmJSCov(callback)

serverCov = (callback) ->
	__async__.series([(callback) ->
		process.on( 'SIGINT', () ->
			console.log('Stopping server'.red)
			cmd =  'utilities/hooks/post-coverage.sh'
			run(cmd, () ->
				process.exit()
			, true)
		)

		cmd = 'utilities/hooks/pre-coverage.sh'
		run(cmd, callback)
	, (callback) ->
		fileurl = if config && target < 1 then config else 'tests/server'
		msg = 'Running code coverage for server @ "' + fileurl + '"\n'
		console.log(msg.green)
		cmd = 'mkdir -p coverage/server && NODE_ENV=coverage mocha --recursive "' + fileurl + '" -R json-cov > coverage/server/index.json' 
		run(cmd, callback)
	, (callback) ->
		cmd = 'json2html "coverage/server/index.json" "coverage/server/index.html"'
		run(cmd, () ->
			__async__.series([(callback) ->
				postCov(callback)
			], (err, results) ->
				run(opencmd + ' coverage/server/index.html', callback)
			)
		)
	, (callback) ->
		cmd =  'utilities/hooks/post-coverage.sh'
		run(cmd, callback, true)
	], (err, results) ->
		callback() if callback
	)

clientCov = (callback) ->
	exitCode = 0
	__async__.series([(callback) ->
		testBuild(callback)
		
	, (callback) ->
		console.log('Starting server @ localhost:3000 for coverage'.green)
		process.on( 'SIGINT', () ->
			console.log('Stopping server'.red)
			cmd =  'utilities/hooks/post-test.sh'
			run(cmd, () ->
				process.exit()
			, true)
		)

		cmd = 'utilities/hooks/pre-test.sh'
		run(cmd, callback)
	, (callback) ->
		fileurl = if config && target > 1 then config else 'config/karma/all-cov.conf.js'
		msg = 'Running code coverage for client @ "' + fileurl + '"\n'
		console.log(msg.green)
		cmd = 'karma start "' + fileurl + '" '

		if !__cli__.multiruns
			cmd += '--single-run --no-auto-watch ' 
		if __cli__.inBrowser && browser
			cmd += '--browsers ' + browser

		run(cmd, (err, code, signal) ->
			exitCode = code if code && !err
			run(opencmd + ' coverage/client/*/index.html', callback)
		)
	, (callback) ->
		console.log('Stopping server'.green)
		cmd =  'utilities/hooks/post-test.sh'
		run(cmd, callback, true)
	], (err, results) ->
		callback(null, exitCode) if callback
	)

cov = (callback) ->
	if (target == 3)
		console.log('Coverage report is not supported by Selenium. Exiting...'.red)
		callback() if callback
		return

	__async__.series([(callback) ->
		console.log('Please make sure Mocha pass all the tests before running coverage.'.yellow)
		preCov(callback)
	, (callback) ->
		if target >= 1 then checkForDevelopmentFolder(callback) else link(callback)

	, (callback) ->
		if target <= 1 then serverCov(callback) else callback()
	, (callback) ->
		if target >= 1 then clientCov(callback) else callback()
	
	], (err, results) ->
		if !err
			console.log('Coverage report is located inside coverage folder.'.green)
		callback() if callback
	)

#-------------------------------------------------------------------------------------
# Build
#-------------------------------------------------------------------------------------

# Build helper
copyAsset = (srcDir, sub, callback) ->
	#public/libraries
	#s|^public\/libraries\/.*?\/|.tmp\/|
	msg = 'Copying asset from directory ' + srcDir + ' using RegExp "' + sub + '"'
	console.log(msg.green)
	cmd = "find " + srcDir + " -type f -not -name '.*' | while read infile; do outfile=`echo \"$infile\" | perl -pe '" + sub + "'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\"; cp \"$infile\" \"$outfile\"; done"
	run(cmd, callback)

# Build production

clearTmp = (callback) ->
	console.log('Deleting .tmp & production folders.'.green)
	cmd = 'rm -r .tmp production'
	run(cmd, callback)

buildCss = (callback) ->
	console.log('Minifing .less files.'.green)
	__async__.series([(callback) ->
		cmd = "mkdir -p .tmp/css && lessc -x -yui-compress \"$PWD/public/css/main.less\" \"$PWD/.tmp/css/main.css\""
		run(cmd, callback)
	, (callback) ->
		cmd = 'grunt minifyCss'
		run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)

buildJs = (callback) ->
	console.log('Compiling & minifing .ts files.'.green)
	__async__.series([(callback) ->
		# cmd = "mkdir -p .tmp/js && find public -name 'src' | while read src; do outfile=`echo \"$src\" | sed 's/\\\/js\\\/src/.js/;s/^public\\\/modules/.tmp\\\/js/;s/^public/.tmp\\\/js/'`; find \"$src\" -name '*.ts' -not -name '*.d.ts' -type f | xargs tsc --out \"$outfile\" --target ES5; done"
		# run(cmd, callback)
		cmd = "mkdir -p .tmp/js && find public -name '*.ts' -not -name '*.d.ts' -type f  | xargs tsc --out \".tmp/js/scripts.js\" --target ES5 --removeComments --module amd;"
		run(cmd, callback)
	, (callback) ->
		cmd = "find public -name 'src' -type d | while read indir;do find \"$indir\" -name '*.js' -type f | while read infile; do outfile=`echo \"$infile\" | perl -pe 's/^public\\\/modules\\\/.*?\\\//.tmp\\\//;s/^public\\\/core/.tmp/;s/\\\/src\\\//\\\//';`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\" && cp \"$infile\" \"$outfile\"; done; done"
		run(cmd, callback)
	, (callback) ->
		cmd = 'grunt minifyJs'
		run(cmd, callback)
	, (callback) ->
		cmd = 'rm production/js/scripts.js'
		run(cmd, callback)
	, (callback) ->
		cmd = "find .tmp/js -name '*.txt' | while read infile; do cat \"$infile\"; done"
		run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)

buildHtml = (callback) ->
	console.log('Minifing .html files.'.green)
	cmd = 'grunt minifyHtml'
	run(cmd, callback)

buildJson = (callback) ->
	console.log('Minifing .json files.'.green)
	__async__.series([(callback) ->
		cmd = "find public -name '*.json' | while read infile; do outfile=`echo \"$infile\" | perl -pe 's|^public\\\/|production\\\/|'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$PWD/$outdir\" && cp \"$PWD/$infile\" \"$PWD/$outfile\"; done"
		run(cmd, callback)
	, (callback) ->
		cmd = 'grunt minifyJson'
		run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)

copyLibraries = (env, callback) ->
	__async__.series([(callback) ->
		copyAsset('public/libraries', 's|^public\\\/libraries\\\/.*?\\\/|' + env + '\\\/|', callback)
	, (callback) ->
		if (env != 'production') then return callback()
		cmd = "find production/js -name '*.js' -not -name '*.min.js' -type f -print0 | xargs -0 rm"
		run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)

copyImages = (callback) ->
	cmd = "mkdir -p production/img && find public -name 'img' -type d | while read indir; do find \"$indir\" -type f | while read infile; do cp \"$infile\" \"production/img\"; done; done"
	run(cmd, callback)

build = (callback) ->
	__async__.series([(callback) ->
		clearTmp(callback)
	, (callback) ->
		buildCss(callback)
	, (callback) ->
		buildJs(callback)
	, (callback) ->
		buildHtml(callback)
	, (callback) ->
		buildJson(callback)
	, (callback) ->
		copyLibraries('production', callback)
	, (callback) ->
		copyImages(callback)
	, (callback) ->
		unlinkdir('app public', callback)
	], (err, results) ->
		console.log('Minified build files are located @ ./production folder.'.green)
		callback() if callback
	)

# Build development

devBuild = (callback) ->
	__async__.series([(callback) ->
		callback()
		# console.log('Compiling all main.less files to development/css'.green)
		# cmd = "mkdir -p development/css && find . -name 'main.less' | while read infile; do outfile=`echo \"$infile\" | sed 's/\\\/css\\\/main.less/.css/;s/^.\\\/public\\\/modules/.\\\/development\\\/css/;s/.\\\/public/.\\\/development\\\/css/'`; lessc \"$infile\" \"$outfile\" --line-numbers=mediaquery; done"
		# run(cmd, callback)
	, (callback) ->
		callback()
		# console.log('Compiling all .ts files in ./development/js folder to ./development/js/scripts.js'.green)
		# cmd = "find development/js -name '*.ts' -not -name '*.d.ts' | xargs tsc --out \"development/js/scripts.js\" --sourcemap --target ES5"
		# run(cmd, callback)
	, (callback) ->
		link(callback)
	, (callback) ->
		# cmd = "find public -name '*.ts' -not -name '*.d.ts' -type f | while read infile; do echo \"$(tput setaf 2)Compiling $infile $(tput sgr0)\"; tsc \"$infile\" --sourcemap --target ES5; done"
		cmd = "grunt compileTs --force"
		run(cmd, callback)
	], (err, results) ->
		console.log('Build files are located @ ./development folder.'.green)
		callback() if callback
	)

testBuild = (callback) ->
	__async__.series([(callback) ->
		console.log('Compiling LESS files from public/**/main.less to tests/client/.tmp/css'.green)
		cmd = "lessc \"public/css/main.less\" \"tests/client/.tmp/css/test.css\""
		run(cmd, callback)
	, (callback) ->
		console.log('Generating HTML files from views/**/*.jade to tests/client/.tmp/html'.green)
		cmd = "find views -name '*.jade' -not -name 'layout.jade' | while read infile; do outfile=`echo \"$infile\" | sed 's|^views|tests\\\/client\\\/.tmp\\\/html|;s|.jade|.html|'`; outdir=`dirname \"$outfile\"`; mkdir -p \"$outdir\" && jade --pretty --out \"$outdir\" \"$infile\"; done"
		run(cmd, callback)
	, (callback) ->
		cmd = "rm \"$PWD/development/tests\""
		run(cmd, callback, true)
	, (callback) ->
		cmd = "ln -s \"$PWD/tests/client/.tmp\" \"$PWD/development/tests\""
		run(cmd, callback)
	, (callback) ->
		prepareHTMLsForTests(callback)	
	], (err, results) ->
		callback() if callback
	)

#-------------------------------------------------------------------------------------
# Start or stop watcher / mongod in a screen window
#-------------------------------------------------------------------------------------

bake = (callback) ->
	if (__cli__.debugBrowser)
		if file
			fileToLaunch = file
		else if __cli__.cluster || __cli__.instance || __cli__.server || __cli__.app
			fileToLaunch = if __cli__.cluster then 'cluster.js' else if __cli__.instance then 'instance.js' else if __cli__.server then 'server.js' else 'app.js'
		else
			fileToLaunch = 'app.js' if __fs__.existsSync 'app.js'
			fileToLaunch = 'server.js' if __fs__.existsSync 'server.js'
			fileToLaunch = 'instance.js' if __fs__.existsSync 'instance.js'
			fileToLaunch = 'cluster.js' if __fs__.existsSync 'cluster.js'
		console.log('\nStarting mongodb, redis and typescript watcher.\nLaunching server in remote debug mode using nodemon.\n'.green)
		cmd =  'utilities/hooks/pre-debug-browser.sh ' + fileToLaunch
		console.log(cmd)
		run(cmd, callback)
	else
		console.log('\nStarting mongodb, redis and typescript watcher\n'.green)
		cmd =  'utilities/hooks/pre-dev.sh'
		run(cmd, callback)

unbake = (callback) ->
	__async__.series([(callback) ->
		if (__cli__.debugBrowser)
			console.log('\nKilling server.\nStopping mongodb and typescript watcher\n'.green)
			cmd =  'utilities/hooks/post-debug-browser.sh'
			run(cmd, callback)
		else
			console.log('\nStopping mongodb and typescript watcher\n'.green)
			cmd =  'utilities/hooks/post-dev.sh'
			run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)

#-------------------------------------------------------------------------------------
# expand tabs to spaces
#-------------------------------------------------------------------------------------

expand = (callback) ->
	if (!expandFolders) then expandFolders = '.'
	cmd = 'find ' + expandFolders + " -type f -name '*.ts' -or -name '*.js' -or -name '*.less' -or -name '*.css' -or -name '*.json' -or -name '*.rb' -or -name '*.html' | while read infile; do if [[ ! \"$infile\" == *\"node_modules\"* ]]; then expand -t 4 \"$infile\" > _tmp_ && mv _tmp_ \"$infile\"; fi; done"
	run(cmd, callback)

#-------------------------------------------------------------------------------------
# Check if in project root
#-------------------------------------------------------------------------------------

watch = (callback) ->
	__async__.series([(callback) ->
		if (!__fs__.existsSync('./development')) then link(callback) else callback()
	, (callback) ->
		cmd = 'grunt watchTs --force'
		run(cmd, callback)
	], (err, results) ->
		callback() if callback
	)
	
#-------------------------------------------------------------------------------------
# Eliminate all .d.ts .js .js.map for each .ts file in public/core and public/modules 
#-------------------------------------------------------------------------------------

eliminate = (callback) ->
	cmd = "find public -name '*.ts' -not -name '*.d.ts' | while read infile; do js=`echo \"$infile\" | sed 's|.ts|.js|'`; d=`echo \"$infile\" | sed 's/.ts/.d.ts/'`; map=`echo \"$infile\" | sed 's/.ts/.js.map/'`; rm \"$js\"; rm \"$map\"; rm \"$d\"; done"
	run(cmd, callback)

#-------------------------------------------------------------------------------------
# Automatic update
#-------------------------------------------------------------------------------------

update = (callback) ->
	__async__.waterfall([(callback) ->
		process.stdout.write('Checking chococupcake version ... '.green)

		cmd = 'npm show chococupcake version'
		exec(cmd, (data) ->
			data = data.replace(/\s+/g, '');
			callback(null, data == version)
		)

	, (isLatest, callback) ->
		if isLatest
			console.log('Already at latest version'.green)
			callback()
		else
			console.log('Updating chococupcake'.green)
			if (process.platform != 'darwin') # Ubuntu
				cmd = 'sudo npm i -g chococupcake'
			else
				cmd = 'npm i -g chococupcake'
			run(cmd, () ->
				console.log('Please rerun your previous script command.'.green) if (!__cli__.update)
				process.kill()
			)
	], (err, results) ->
		callback() if callback
	)

#-------------------------------------------------------------------------------------
# Check if in project root
#-------------------------------------------------------------------------------------

if !__fs__.existsSync('./package.json')
	console.log('Must run cupcake in root directory of the project.'.red)
	return

#-------------------------------------------------------------------------------------
# Define cli options
#-------------------------------------------------------------------------------------

__cli__
	.version(version)
	.usage(usage)
	.option("", "\nHelper\n".red)
	.option("-u, --update", "Manually update ChocoCupCake.")
	.option("-S, --skip", "Skip auto update of ChocoCupCake.")
	.option("-E, --expand [folders]", "Expand tabs to spaces.", expandinput)
	.option("-l, --link", 'Link'.yellow + " files.")
	.option("-h, --halt", "Stop all running scripts of " + 'forever'.green + ".")
	.option("-e, --eliminate", "Eliminate all .d.ts .js .js.map for each .ts file in public/core and public/modules.")
	.option("-r, --remove", "Remove all temporary files & folders.")
	.option("-y, --yui", "Compile " + "api documentation".bold.underline + ".")
	.option("-Y, --YUI", "Run " + "api documentation".bold.underline + " as a server (at port 5000).")
	.option("-w, --watch", "Watch".red + " all typescript files in public folder.\n\n" + "Build\n".yellow)
	.option("-B, --build", "Compile and " + "minify".cyan + " stylesheet & javascript for production.")
	.option("-b, --devBuild", "Compile and " + "minify".cyan + " stylesheet & javascript for development.\n\n" + "Test & Coverage\n".green)
	.option("-t, --test [config]", "Unit " + "test".bold.inverse + " project using Mocha", configinput)
	.option("-C, --coverage [config]", "Generate " + "test coverage report".underline.magenta + " using Mocha\n\n" + "Start\n".cyan, configinput)
	.option("-s, --start [file]", "Start server using node [optional file] (default to development mode)" + "\n\nTest options:\n".blue, fileinput)
	.option("-T, --target [target]", "Unit test " + "target".green + " (s: server, c: client (karma), S: client (selenium), default to all.)", targetinput)
	.option("-I, --inBrowser [browser]", "Run frontend test in [browser]", browserinput)
	.option("-m, --multiruns", "Disable single run for client tests using karma (option of --test & --coverage)" + "\n\nStart options:\n".magenta, portinput)
	.option("-p, --production [port]", "Start server in " + "deployment".rainbow.bold.italic.underline + " mode. [optional port #, default: 80] (option of --start)", portinput)
	.option("-x, --nginx", "Start server in production with " + "nginx".bold.inverse + ". (static files are served by Nginx, ignored if not in production, option of --start)\n")
	.option("-d, --debug", "Debug".cyan + " server using command line.  (option of --start, not compatible with nodemon / forever)")
	.option("-D, --debugBrowser", "Debug".cyan + " server using a browser.  (option of --start, not compatible with forever)")
	.option("-n, --nodemon", "Start server with " + 'nodemon'.green + " (" + "supervisor".cyan + " in ubuntu) instead of " + 'node'.yellow + ".  (option of --start)")
	.option("-f, --forever", "Start server with " + 'forever'.red + ".  (option of --start)\n")
	.option("-c, --cluster", "Start server using " + 'cluster.js'.yellow + ".  (option of --start)")
	.option("-i, --instance", "Start server using " + 'instance.js'.yellow + ".  (option of --start)")
	.option("-v, --server", "Start server using " + 'server.js'.yellow + ".  (option of --start)")
	.option("-a, --app", "Start server using " + 'app.js'.yellow + ".  (option of --start)")
	.parse(process.argv)

#-------------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------------
main = (callback) ->
	if __cli__.start
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild  || __cli__.watch || __cli__.eliminate || __cli__.link || __cli__.yui || __cli__.YUI || __cli__.expand)


		if (__cli__.debug && (__cli__.nodemon || __cli__.forever))
			console.log('Debug is not compatible with nodemon or forever.'.red)
			return

		if ((__cli__.debug || __cli__.debugBrowser) && (__cli__.production || __cli__.nginx))
			console.log('Debug should not be ran in production environment.'.red)
			return

		if (__cli__.debug && __cli__.debugBrowser)
			console.log('Debug should not be ran in parallel with debug in browser.'.red)
			return

		__async__.series([(callback) ->
			install = __cp__.spawn("npm", ['install'], {stdio: 'inherit'}).on('exit', () ->
				callback()
			)

		, (callback) ->
			checkForDevelopmentFolder(callback, true)

		, (callback) ->
			if (__cli__.production) then callback() else bake(callback)

		, (callback) ->
			if (__cli__.production) then callback()
			process.on('SIGINT', () ->
				process.exit()
			)
			process.on('exit', () ->
				unbake()			
				process.exit()
			)
			callback()

		, (callback) ->
			appToLaunch = if __cli__.nodemon then (if process.platform != 'darwin' then 'supervisor' else 'nodemon') else 'node'
			envToLaunch = if __cli__.nginx then 'nginx' else (if __cli__.production then "production" else "development")
			portToLaunch = null
			fileToLaunch = null

			if __cli__.production
				portToLaunch = if port then port else '80'

			process.env.NODE_ENV = envToLaunch

			if (__cli__.debugBrowser)
				cmd = 'node-inspector --web-port=1234'
				run(cmd, null)
				cmd = opencmd + ' http://127.0.0.1:1234/debug?port=5858'
				run(cmd, callback)

			else 
				if file
					fileToLaunch = file
				else if __cli__.cluster || __cli__.instance || __cli__.server || __cli__.app
					fileToLaunch = if __cli__.cluster then 'cluster.js' else if __cli__.instance then 'instance.js' else if __cli__.server then 'server.js' else 'app.js'
				else
					fileToLaunch = 'app.js' if __fs__.existsSync 'app.js'
					fileToLaunch = 'server.js' if __fs__.existsSync 'server.js'
					fileToLaunch = 'instance.js' if __fs__.existsSync 'instance.js'
					fileToLaunch = 'cluster.js' if __fs__.existsSync 'cluster.js'

				if (!fileToLaunch || !__fs__.existsSync(fileToLaunch))
					if (fileToLaunch)
						console.log((fileToLaunch+' not found.').red)
					else
						console.log('No valid node.js app found.'.red)
					return
				else
					console.log(appToLaunch.green + ' ' + fileToLaunch.yellow + (' (' + envToLaunch + (if portToLaunch then ' '+portToLaunch else '') + ')').cyan)

				server = null

				childEnv  = process.env
				childEnv.NODE_ENV = envToLaunch
				childEnv.PORT = portToLaunch if (portToLaunch)

				if __cli__.debug
					nodemon = if process.platform != 'darwin' then 'node' else 'nodemon'
					server = __cp__.spawn(nodemon, ['debug', fileToLaunch], {stdio: 'inherit', env: childEnv})
				else
					if process.platform != 'darwin'
						if (__cli__.forever)
							server = __cp__.spawn('/usr/bin/sudo', ['-E', 'forever', 'start', '-c', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
						else
							server = __cp__.spawn('/usr/bin/sudo', ['-E', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
					else
						if (__cli__.forever)
							server = __cp__.spawn('forever', ['start', '-c', appToLaunch, fileToLaunch], {stdio: 'inherit', env: childEnv})
						else
							server = __cp__.spawn(appToLaunch, [fileToLaunch], {stdio: 'inherit', env: childEnv})
				server.on('exit', () ->
					callback()
				)
		])
	else if __cli__.expand
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild  || __cli__.watch || __cli__.eliminate || __cli__.link || __cli__.yui || __cli__.YUI)

		expand()

	else if __cli__.yui
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild  || __cli__.watch || __cli__.eliminate || __cli__.link || __cli__.YUI)

		__async__.series([(callback) ->
			cmd = 'mkdir -p documentations'
			run(cmd, callback)
		, (callback) ->
			server = __cp__.spawn('yuidoc', ['-c', 'config/yuidoc/config.json'], {stdio: 'inherit', env: process.env})
			server.on('exit', () ->
				callback()
			)
		], (err, results) ->
			cmd = opencmd + ' documentations/index.html'
			run(cmd, callback)
		)

	else if __cli__.YUI
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild  || __cli__.watch || __cli__.eliminate || __cli__.link)

		__async__.series([(callback) ->
			server = __cp__.spawn('yuidoc', ['-c', 'config/yuidoc/config.json', '--server', '5000'], {stdio: 'inherit', env: process.env})
			setTimeout(callback, 2000)
		# , (callback) ->
		# 	cmd = opencmd + ' http://localhost:5000'
		# 	run(cmd, callback)
		], (err, results) ->

		)

	else if __cli__.link
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild || __cli__.watch || __cli__.eliminate)

		link()

	else if __cli__.eliminate
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild || __cli__.watch)

		eliminate()

	else if __cli__.watch
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage || __cli__.devBuild)

		watch()

	else if __cli__.devBuild
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove || __cli__.coverage)

		devBuild()

	else if __cli__.coverage
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build || __cli__.remove)

		cov()
		
	else if __cli__.remove
		__cli__.help() if (__cli__.test || __cli__.halt || __cli__.build)

		unlink()
			
	else if __cli__.build
		__cli__.help() if (__cli__.test || __cli__.halt)

		build()

	else if __cli__.halt
		__cli__.help() if (__cli__.test)

		__async__.series([(callback) ->
			run('sudo forever stopall', callback)
		, (callback) ->
			run('forever stopall', callback)
		])

	else if __cli__.test
		
		test()

	else __cli__.help()

	callback()

#-------------------------------------------------------------------------------------
# chocoCupCake Code Entry Point
#-------------------------------------------------------------------------------------

__async__.series([(callback) ->
	if __cli__.skip then callback() else update(callback)
	# callback()
, (callback) ->
	main(callback)
])
