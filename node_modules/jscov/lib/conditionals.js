// Generated by CoffeeScript 1.6.3
(function() {
  var langs, noop, process;

  noop = "__noop__cc__";

  process = function(_arg) {
    var regexp, transform;
    regexp = _arg.regexp, transform = _arg.transform;
    return function(line) {
      var exp, padding, x, _ref;
      x = line.match(regexp);
      if (!x) {
        return {
          line: line
        };
      }
      _ref = x.slice(1), padding = _ref[0], exp = _ref[1];
      return {
        line: padding + transform(exp),
        altered: true
      };
    };
  };

  langs = {
    js: {
      header: "var " + noop + " = function() {};",
      processLine: process({
        regexp: /^(\s*)\/\/\s*JSCOV:\s*(.*[^\s])(\s*)$/,
        transform: function(exp) {
          return "if (" + exp + ") { " + noop + "() } else { " + noop + "() };";
        }
      })
    },
    coffee: {
      header: "" + noop + " = (->)",
      processLine: process({
        regexp: /^(\s*)#\s*JSCOV:\s*(.*[^\s])(\s*)$/,
        transform: function(exp) {
          return "if (" + exp + ") then " + noop + "() else " + noop + "()";
        }
      })
    }
  };

  exports.expand = function(str, options) {
    var altered, lang, result, _ref;
    if (options == null) {
      options = {};
    }
    lang = (_ref = options.lang) != null ? _ref : 'js';
    result = str.split('\n').map(langs[lang].processLine);
    altered = result.some(function(x) {
      return x.altered;
    });
    if (altered) {
      return langs[lang].header + "\n" + result.map(function(x) {
        return x.line;
      }).join('\n');
    } else {
      return str;
    }
  };

}).call(this);
